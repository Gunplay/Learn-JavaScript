// function sayHi() {
//     alert( "Привет" );
// }
//
// alert( sayHi ); // выведет код функции


function sayHi() {   // (1) создаём
    alert( "Привет" );
}

let func = sayHi;    // (2) копируем

func(); // Привет    // (3) вызываем копию (работает)!
sayHi(); // Привет   //     прежняя тоже работает (почему бы нет)



// Зачем нужна точка с запятой в конце?
//     У вас мог возникнуть вопрос: Почему в Function Expression ставится точка с запятой ; на конце, а в Function Declaration нет:

    function sayHi() {
        // ...
    }

let sayHi = function() {
    // ...
};
// Ответ прост:
//
//     Нет необходимости в ; в конце блоков кода и синтаксических конструкций, которые их используют, таких как if { ... }, for { }, function f { } и т.д.
//     Function Expression использует внутри себя инструкции присваивания let sayHi = ...; как значение. Это не блок кода, а выражение с присваиванием. Таким образом, точка с запятой не относится непосредственно к Function Expression, она лишь завершает инструкцию.


// Функции-«колбэки»
// Рассмотрим ещё примеры функциональных выражений и передачи функции как значения.
//
//     Давайте напишем функцию ask(question, yes, no) с тремя параметрами:
//
//     question
// Текст вопроса
// yes
// Функция, которая будет вызываться, если ответ будет «Yes»
// no
// Функция, которая будет вызываться, если ответ будет «No»
// Наша функция должна задать вопрос question и, в зависимости от того, как ответит пользователь, вызвать yes() или no():

function ask(question, yes, no) {
    if (confirm(question)) yes()
    else no();
}

function showOk() {
    alert( "Вы согласны." );
}

function showCancel() {
    alert( "Вы отменили выполнение." );
}

// использование: функции showOk, showCancel передаются в качестве аргументов ask
ask("Вы согласны?", showOk, showCancel);



//Мы можем переписать этот пример значительно короче, используя Function Expression:

    function ask(question, yes, no) {
        if (confirm(question)) yes()
        else no();
    }

ask(
    "Вы согласны?",
    function() { alert("Вы согласились."); },
    function() { alert("Вы отменили выполнение."); }
);
// Здесь функции объявляются прямо внутри вызова ask(...). У них нет имён, поэтому они называются анонимными. Такие функции недоступны снаружи ask (потому что они не присвоены переменным), но это как раз то, что нам нужно.
//
//     Подобный код, появившийся в нашем скрипте выглядит очень естественно, в духе JavaScript.