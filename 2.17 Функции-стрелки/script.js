// let sum = (a, b) => a + b;
//
// /* Более короткая форма для:
//
// let sum = function(a, b) {
//   return a + b;
// };
// */
//
// alert( sum(1, 2) ); // 3

// let multiple = (z, x) => z * x;
//
// alert ( multiple(3,5));


//Если у нас только один аргумент, то круглые скобки вокруг параметров можно опустить, сделав запись ещё короче:

// тоже что и
// let double = function(n) { return n * 2 }
//     let double = n => n * 4;
//
// alert( double(3) ); // 12
//Если нет аргументов, указываются пустые круглые скобки:

//     let sayHi = () => alert("Hello!");
//
// sayHi();
//
//
// Функции-стрелки могут быть использованы так же, как и Function Expression.
//
//     Например, для динамического создания функции:

//     let age = prompt("Сколько Вам лет?", 18);
//
// let welcome = (age < 18) ?
//     () => alert('Привет') :
//     () => alert("Здравствуйте!");
//
// welcome(); // теперь всё в порядке
//
//
// let age1 = prompt("Сколько Вам лет?", 18);
// let goodBy = (age1 > 100) ?
//     () => alert('уже поздно') :
//     () => alert('как раз');
//
// goodBy();
//
//
//
// Порой нам нужно что-то посложнее, например, выполнить несколько инструкций. Это также возможно, нужно лишь заключить инструкции в фигурные скобки. И использовать return внутри них, как в обычной функции.
//
//     Например:

let sum = (a, b) => {  // фигурная скобка, открывающая тело многострочной функции
    let result = a + b;
    return result; // при фигурных скобках для возврата значения нужно явно вызвать return
};

alert( sum(1, 2) ); // 3