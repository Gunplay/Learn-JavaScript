//В JavaScript есть три логических оператора: || (ИЛИ), && (И) и ! (НЕ).


// if (1 || 0) { // работает как if( true || false )
//     alert( 'truthy!' );
// }

// let hour = 9;
//
// if (hour < 10 || hour > 18) {
//     alert( 'Офис закрыт.' );
// }

// let hour = 12;
// let isWeekend = false;
// let open  = true;
//
// if (hour < 10 || hour > 18 || isWeekend || open) {
//     alert( 'Офис закрыт.' ); // это выходной
// }


// alert( 1 || 0 ); // 1
// alert( true || 'no matter what' ); // true
//
// alert( null || 1 ); // 1 (первое истинное значение)
// alert( null || 0 || 1 ); // 1 (первое истинное значение)
// alert( undefined || null || 0 ); // 0 (поскольку все ложно, возвращается последнее значение)

// let currentUser = null;
// let defaultUser = "John";
//
// let name = currentUser || defaultUser || "unnamed";
//
// alert( name ); // выбирается "John" – первое истинное значение

//
// let x;
//
// true || (x = 1);
//
// alert(x); // undefined, потому что (x = 1) не вычисляется

//
// let x;
//
// false || (x = 1);
//
// alert(x); // 1




//Оператор И пишется как два амперсанда &&:

// result = a && b;




//Пример с if:

// let hour = 12;
// let minute = 30;
//
// if (hour == 12 && minute == 30) {
//     alert( 'The time is 12:30' );
// }


//Как и в случае с ИЛИ, любое значение допускается в качестве операнда И:

    // if (1 && 0) { // вычисляется как true && false
    //     alert( "не сработает, так как результат ложный" );
    // }

    // else if (1 && 1) {
    //     alert( "работает");
    // }


// alert( true && true );   // true
// alert( false && true );  // false
// alert( true && false );  // false
// alert( false && false ); // false


// Если первый операнд истинный,
// // И возвращает второй:
// alert( 100 && -200);
// alert( 1 && 0 ); // 0
// alert( 1 && 5 ); // 5
//
// // Если первый операнд ложный,
// // И возвращает его. Второй операнд игнорируется
// alert( null && 5 ); // null
// alert( 0 && "no matter what" ); // 0



//Можно передать несколько значений подряд. В таком случае возвратится первое «ложное» значение, на котором остановились вычисления.

// alert( 1 && 2 && null && 3 ); // null
// //Когда все значения верны, возвращается последнее
//
// alert( 1 && 2 && 3 ); // 3



// let x = 1;
//
// (x > 0) && alert( 'Greater than zero!' );







// ! (НЕ)
// Оператор НЕ представлен восклицательным знаком !.
//
// Синтаксис довольно прост:

    // result = !value;
// Оператор принимает один аргумент и выполняет следующие действия:
//
//     Сначала приводит аргумент к логическому типу true/false.
//     Затем возвращает противоположное значение.
 //   Например:

alert( !true ); // false
alert( !0 ); // true
////В частности, двойное НЕ используют для преобразования значений к логическому типу:

    alert( !!"non-empty string" ); // true
alert( !!null ); // false
// То есть первое НЕ преобразует значение в логическое значение и возвращает обратное, а второе НЕ снова инвертирует его. В конце мы имеем простое преобразование значения в логическое.
//
//     Есть немного более подробный способ сделать то же самое – встроенная функция Boolean:

    alert( Boolean("non-empty string") ); // true
alert( Boolean(null) ); // false
//Приоритет НЕ ! является наивысшим из всех логических операторов, поэтому он всегда выполняется первым, перед && или ||.