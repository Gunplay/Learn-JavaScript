// // Операторы сравнения
// // Многие операторы сравнения известны нам из математики.
// //
// //     В JavaScript они записываются так:
// //
// //     Больше/меньше: a > b, a < b.
// //     Больше/меньше или равно: a >= b, a <= b.
// //     Равно: a == b. Обратите внимание, для сравнения используется двойной знак равенства ==. Один знак равенства a = b означал бы присваивание.
// //     Не равно. В математике обозначается символом ≠, но в JavaScript записывается как a != b.
//
//
//
// // Результат сравнения имеет логический тип
// // Все операторы сравнения возвращают значение логического типа:
// //
// //     true – означает «да», «верно», «истина».
// // false – означает «нет», «неверно», «ложь».
// // Например:
//
// // console.log(2 > 1 );  // true (верно)
// // console.log( 2 == 1 ); // false (неверно)
// // console.log(2 != 1 ); // true (верно)
//
// let result = 5 > 4; // результат сравнения присваивается переменной result
// alert( result ); // true
//
// // Чтобы определить, что одна строка больше другой, JavaScript использует «алфавитный» или «лексикографический» порядок.
// //
// //     Другими словами, строки сравниваются посимвольно.
// //
// //     Например:
//
// alert( 'а' > 'А' ); // true
// alert( 'Коты' > 'Кода' ); // true
// alert( 'Сонный' > 'Сон' ); // true
// alert ('ддд' > 'aaa' );// true
//
//
//
//
// // Сравнение разных типов
// // При сравнении значений разных типов JavaScript приводит каждое из них к числу.
//
//     // Например:
//
// alert( '2' > 1 ); // true, строка '2' становится числом 2
// alert( '01' == 1 ); // true, строка '01' становится числом 1
// // Логическое значение true становится 1, а false – 0.
// //
// // Например:
//
//     alert( true == 1 ); // true
// alert( false == 0 ); // true
//
//
// let a = 0;
// alert( Boolean(a) ); // false
//
// let b = "0";
// alert( Boolean(b) ); // true
//
// alert(a == b); // true!
//
//
// alert( 0 == false ); // true
// //Та же проблема с пустой строкой:
//
//     alert( '' == false ); // true


// Оператор строгого равенства === проверяет равенство без приведения типов.
//
//     Другими словами, если a и b имеют разные типы, то проверка a === b немедленно возвращает false без попытки их преобразования.
//
//     Давайте проверим:

console.log( 0 === false ); // false, так как сравниваются разные типы

// Сравнение с null и undefined
// Поведение null и undefined при сравнении с другими значениями — особое:

//     При строгом равенстве ===
// Эти значения различны, так как различны их типы.

alert( null === undefined ); // false
// При нестрогом равенстве ==
// Эти значения равны друг другу и не равны никаким другим значениям. Это специальное правило языка.

alert( null == undefined ); // true

// Сравним null с нулём:

    alert( null > 0 );  // (1) false
alert( null == 0 ); // (2) false
alert( null >= 0 ); // (3) true



