// let i = 0;
// while (i < 3) { // выводит 0, затем 1, затем 2
//     alert( i );
//     i++;
// }

// let k = 5;
// while ( k <= 7) {
//     alert(k);
//     k++
//
// }

// let i = 0;
// while (i < -3) { // когда i будет равно 0, условие станет ложным, и цикл остановится
//     alert( i );
//     i--;
// }

// let i = 3;
// while (i > -10) alert(i--);


// Цикл «do…while»
// Проверку условия можно разместить под телом цикла, используя специальный синтаксис do..while:

    // do {
    //     // тело цикла
    // } while (condition);

//
//
// let i = 0;
// do {
//     alert( i );
//     i++;
// } while (i < 3);



// let i = 27;
// do {
//     alert ( i );
//     i++;
// }  while (i < 30);

//Такая форма синтаксиса оправдана, если вы хотите, чтобы тело цикла выполнилось хотя бы один раз, даже если условие окажется ложным. На практике чаще используется форма с предусловием: while(…) {…}.

// ЦИКЛ FOR
// for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
//     alert(i);
// }
// Выполнить *начало*
// → (Если *условие* == true → Выполнить *тело*, Выполнить *шаг*)
// → (Если *условие* == true → Выполнить *тело*, Выполнить *шаг*)
// → (Если *условие* == true → Выполнить *тело*, Выполнить *шаг*)
// → ...

// for (let i = 0; i < 3; i++) {
//     alert(i); // 0, 1, 2
// }
// alert(i); // ошибка, нет такой переменной

//
//
// let i = 0;
//
// for (i = 0; i < 3; i++) { // используем существующую переменную
//     alert(i); // 0, 1, 2
// }
//
// alert(i); // 3, переменная доступна, т.к. была объявлена снаружи цикла


//
// Пропуск частей «for»
// Любая часть for может быть пропущена.
//
//     Для примера, мы можем пропустить начало если нам ничего не нужно делать перед стартом цикла.

    // Вот так:

//     let i = 0; // мы уже имеем объявленную i с присвоенным значением
//
// for (; i < 3; i++) { // нет необходимости в "начале"
//     alert( i ); // 0, 1, 2
// }
// // Можно убрать и шаг:
//
//     let i = 0;
//
// for (; i < 3;) {
//     alert( i++ );
// }
// // Это сделает цикл аналогичным while (i < 3).
// //
// // А можно и вообще убрать всё, получив бесконечный цикл:
//
//     for (;;) {
//         // будет выполняться вечно
//     }
// При этом сами точки с запятой ; обязательно должны присутствовать, иначе будет ошибка синтаксиса.
//
//     Прерывание цикла: «break»
// Обычно цикл завершается при вычислении условия в false.
//
//     Но мы можем выйти из цикла в любой момент с помощью специальной директивы break.
//
// Например, следующий код подсчитывает сумму вводимых чисел до тех пор, пока посетитель их вводит, а затем – выдаёт:

//     let sum = 0;
//
// while (true) {
//
//     let value = +prompt("Введите число", '');
//
//     if (value ) break; // (*)
//
//     sum += value;
//
// }
// alert( 'Сумма: ' + sum );


//
// for (let i = 0; i < 10; i++) {
//
//     // если true, пропустить оставшуюся часть тела цикла
//     if (i % 2 == 0) continue;
//
//     alert(i); // 1, затем 3, 5, 7, 9
// }

//Метки для break/continue

// for (let i = 0; i < 3; i++) {
//
//     for (let j = 0; j < 3; j++) {
//
//         let input = prompt(`Значение на координатах (${i},${j})`, '');
//
//         // Что если мы захотим перейти к Готово (ниже) прямо отсюда?
//
//     }
// }
//
// alert('Готово!');



outer: for (let i = 0; i < 3; i++) {

    for (let j = 0; j < 3; j++) {

        let input = prompt(`Значение на координатах (${i},${j})`, '');

        // если пустая строка или Отмена, то выйти из обоих циклов
        if (!input) break outer; // (*)

        // сделать что-нибудь со значениями...
    }
}

alert('Готово!');


